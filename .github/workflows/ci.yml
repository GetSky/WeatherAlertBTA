name: Build & Deploy

on:
  push:
    branches: [ "main", "feat/ci_**",  "refactor/ci_**", "fix/ci_**" ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.20'

      - name: Build
        run: go build -v ./...

      - name: Test
        run: go test -v ./...

  build_and_push:
    needs: [ test ]
    runs-on: ubuntu-latest
    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Set the release version
        id: release-version
        run: |
          release_version=$(echo "${{ github.ref }}" | sed 's|refs/heads/||;s|/|_|g')
          echo "Building release version $release_version"
          echo "RELEASE_VERSION=$release_version" >> $GITHUB_OUTPUT
        shell: bash

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          push: true
          tags: getsky/weather-alert-bot:${{ steps.release-version.outputs.RELEASE_VERSION }}

  deploy:
    needs: [ build_and_push ]
    if: github.ref == 'refs/heads/main'
    name: deploy image
    runs-on: ubuntu-latest
    steps:
      - name: install ssh keys
        run: |
          install -m 600 -D /dev/null ~/.ssh/id_rsa
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.SSH_HOST }} > ~/.ssh/known_hosts

      - name: connect and pull
        run: ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "cd ${{ secrets.WORK_DIR }} &&
          docker pull getsky/weather-alert-bot:${{ steps.release-version.outputs.RELEASE_VERSION }} &&
          docker stop weather-alert-bta-telegrambot &&
          docker container rm weather-alert-bta-telegrambot &&
          docker run -d --name weather-alert-bta-telegrambot --restart=always
          -e BOT_TOKEN=${{ secrets.BOT_TOKEN }}
          -e TELEGRAM_CHAT_ID=${{ secrets.TELEGRAM_CHAT_ID }}
          -e WEATHER_URL=${{ vars.WEATHER_URL }}
          -e CHART_WEATHER_URL=${{ vars.CHART_WEATHER_URL }}
          -e WIND_THRESHOLD=${{ vars.WIND_THRESHOLD }}
          -e POLL_INTERVAL=${{ vars.POLL_INTERVAL }}
          -e DELAY_TIME_IN_MINUTES=${{ vars.DELAY_TIME_IN_MINUTES }}
          getsky/weather-alert-bot &&
          exit"

      - name: cleanup
        run: rm -rf ~/.ssh